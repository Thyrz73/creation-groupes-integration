{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { doc, getDoc, getFirestore, setDoc } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport class DatabaseService {\n  constructor(fireservices) {\n    this.fireservices = fireservices;\n    this.db = getFirestore();\n  } // Write in db\n\n\n  newConfig(users, groups) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this.db, 'Configuration', 'configID'), {\n        Groups: groups,\n        Users: users\n      });\n    })();\n  } // Read from db\n\n\n  getConfig() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this2.db, \"Configuration\", \"configID\");\n      const docSnap = yield getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n      } else {\n        console.log(\"No such document!\");\n      }\n    })();\n  }\n\n}\n\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore));\n};\n\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/services/database.service.ts"],"names":["doc","getDoc","getFirestore","setDoc","i0","i1","DatabaseService","constructor","fireservices","db","newConfig","users","groups","Groups","Users","getConfig","docRef","docSnap","exists","console","log","data","ɵfac","DatabaseService_Factory","t","ɵɵinject","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,YAAtB,EAAoCC,MAApC,QAAkD,oBAAlD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,EAAL,GAAUP,YAAY,EAAtB;AACH,GAJwB,CAKzB;;;AACMQ,EAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAAA;;AAAA;AAC3B,YAAMT,MAAM,CAACH,GAAG,CAAC,KAAI,CAACS,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,EAA4C;AACpDI,QAAAA,MAAM,EAAED,MAD4C;AAEpDE,QAAAA,KAAK,EAAEH;AAF6C,OAA5C,CAAZ;AAD2B;AAK9B,GAXwB,CAYzB;;;AACMI,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,YAAMC,MAAM,GAAGhB,GAAG,CAAC,MAAI,CAACS,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAlB;AACA,YAAMQ,OAAO,SAAShB,MAAM,CAACe,MAAD,CAA5B;;AACA,UAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAAO,CAACI,IAAR,EAA9B;AACH,OAFD,MAGK;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AARa;AASjB;;AAtBwB;;AAwB7Bd,eAAe,CAACgB,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIlB,eAAV,EAA2BF,EAAE,CAACqB,QAAH,CAAYpB,EAAE,CAACqB,gBAAf,CAA3B,CAAP;AAAsE,CAAnI;;AACApB,eAAe,CAACqB,KAAhB,GAAwB,aAAcvB,EAAE,CAACwB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEvB,eAAT;AAA0BwB,EAAAA,OAAO,EAAExB,eAAe,CAACgB,IAAnD;AAAyDS,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { doc, getDoc, getFirestore, setDoc } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/firestore\";\r\nexport class DatabaseService {\r\n    constructor(fireservices) {\r\n        this.fireservices = fireservices;\r\n        this.db = getFirestore();\r\n    }\r\n    // Write in db\r\n    async newConfig(users, groups) {\r\n        await setDoc(doc(this.db, 'Configuration', 'configID'), {\r\n            Groups: groups,\r\n            Users: users\r\n        });\r\n    }\r\n    // Read from db\r\n    async getConfig() {\r\n        const docRef = doc(this.db, \"Configuration\", \"configID\");\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            console.log(\"Document data:\", docSnap.data());\r\n        }\r\n        else {\r\n            console.log(\"No such document!\");\r\n        }\r\n    }\r\n}\r\nDatabaseService.ɵfac = function DatabaseService_Factory(t) { return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore)); };\r\nDatabaseService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatabaseService, factory: DatabaseService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}