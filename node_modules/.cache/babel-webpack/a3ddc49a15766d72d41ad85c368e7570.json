{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { doc, getDoc, getFirestore, setDoc } from \"firebase/firestore\";\nlet DatabaseService = class DatabaseService {\n  constructor(fireservices) {\n    this.fireservices = fireservices;\n    this.db = getFirestore();\n  } // Write admin config settings in db\n\n\n  newConfig(users, groups, last) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this.db, 'Configuration', 'configID'), {\n        Groups: groups,\n        Last: last,\n        Users: users\n      });\n    })();\n  } // Read admin config settings from db\n\n\n  getConfig() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this2.db, \"Configuration\", \"configID\");\n      const docSnap = yield getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n      } else {\n        console.log(\"No such document!\");\n      }\n    })();\n  } // Read nb groups created from db\n\n\n  createdGrp() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this3.db, \"Groups\", \"groupsCreated\");\n      const docSnap = yield getDoc(docRef);\n      let data;\n\n      if (docSnap.exists()) {\n        try {\n          data = docSnap.data().created;\n          return data;\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        return -1;\n      }\n    })();\n  }\n\n};\n\nDatabaseService.ctorParameters = () => [{\n  type: AngularFirestore\n}];\n\nDatabaseService = __decorate([Injectable({\n  providedIn: 'root'\n})], DatabaseService);\nexport { DatabaseService };","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/services/database.service.ts"],"names":["__decorate","Injectable","AngularFirestore","doc","getDoc","getFirestore","setDoc","DatabaseService","constructor","fireservices","db","newConfig","users","groups","last","Groups","Last","Users","getConfig","docRef","docSnap","exists","console","log","data","createdGrp","created","err","error","ctorParameters","type","providedIn"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,YAAtB,EAAoCC,MAApC,QAAkD,oBAAlD;AACA,IAAIC,eAAe,GAAG,MAAMA,eAAN,CAAsB;AACxCC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,EAAL,GAAUL,YAAY,EAAtB;AACH,GAJuC,CAKxC;;;AACMM,EAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,EAAsB;AAAA;;AAAA;AACjC,YAAMR,MAAM,CAACH,GAAG,CAAC,KAAI,CAACO,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,EAA4C;AACpDK,QAAAA,MAAM,EAAEF,MAD4C;AAEpDG,QAAAA,IAAI,EAAEF,IAF8C;AAGpDG,QAAAA,KAAK,EAAEL;AAH6C,OAA5C,CAAZ;AADiC;AAMpC,GAZuC,CAaxC;;;AACMM,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,YAAMC,MAAM,GAAGhB,GAAG,CAAC,MAAI,CAACO,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAlB;AACA,YAAMU,OAAO,SAAShB,MAAM,CAACe,MAAD,CAA5B;;AACA,UAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAAO,CAACI,IAAR,EAA9B;AACH,OAFD,MAGK;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AARa;AASjB,GAvBuC,CAwBxC;;;AACME,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,YAAMN,MAAM,GAAGhB,GAAG,CAAC,MAAI,CAACO,EAAN,EAAU,QAAV,EAAoB,eAApB,CAAlB;AACA,YAAMU,OAAO,SAAShB,MAAM,CAACe,MAAD,CAA5B;AACA,UAAIK,IAAJ;;AACA,UAAIJ,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClB,YAAI;AACAG,UAAAA,IAAI,GAAGJ,OAAO,CAACI,IAAR,GAAeE,OAAtB;AACA,iBAAOF,IAAP;AACH,SAHD,CAIA,OAAOG,GAAP,EAAY;AACRL,UAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACH;AACJ,OARD,MASK;AACD,eAAO,CAAC,CAAR;AACH;AAfc;AAgBlB;;AAzCuC,CAA5C;;AA2CApB,eAAe,CAACsB,cAAhB,GAAiC,MAAM,CACnC;AAAEC,EAAAA,IAAI,EAAE5B;AAAR,CADmC,CAAvC;;AAGAK,eAAe,GAAGP,UAAU,CAAC,CACzBC,UAAU,CAAC;AACP8B,EAAAA,UAAU,EAAE;AADL,CAAD,CADe,CAAD,EAIzBxB,eAJyB,CAA5B;AAKA,SAASA,eAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Injectable } from '@angular/core';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\nimport { doc, getDoc, getFirestore, setDoc } from \"firebase/firestore\";\r\nlet DatabaseService = class DatabaseService {\r\n    constructor(fireservices) {\r\n        this.fireservices = fireservices;\r\n        this.db = getFirestore();\r\n    }\r\n    // Write admin config settings in db\r\n    async newConfig(users, groups, last) {\r\n        await setDoc(doc(this.db, 'Configuration', 'configID'), {\r\n            Groups: groups,\r\n            Last: last,\r\n            Users: users\r\n        });\r\n    }\r\n    // Read admin config settings from db\r\n    async getConfig() {\r\n        const docRef = doc(this.db, \"Configuration\", \"configID\");\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            console.log(\"Document data:\", docSnap.data());\r\n        }\r\n        else {\r\n            console.log(\"No such document!\");\r\n        }\r\n    }\r\n    // Read nb groups created from db\r\n    async createdGrp() {\r\n        const docRef = doc(this.db, \"Groups\", \"groupsCreated\");\r\n        const docSnap = await getDoc(docRef);\r\n        let data;\r\n        if (docSnap.exists()) {\r\n            try {\r\n                data = docSnap.data().created;\r\n                return data;\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n};\r\nDatabaseService.ctorParameters = () => [\r\n    { type: AngularFirestore }\r\n];\r\nDatabaseService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    })\r\n], DatabaseService);\r\nexport { DatabaseService };\r\n"]},"metadata":{},"sourceType":"module"}