{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { doc, getDoc, getFirestore, setDoc, getDocs, collection, query, where } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport class DatabaseService {\n  constructor(fireservices) {\n    this.fireservices = fireservices;\n    this.db = getFirestore();\n  } // Write admin config settings in db\n\n\n  newConfig(users, groups, last, userPerGroup) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this.db, 'Configuration', 'configID'), {\n        Groups: groups,\n        Last: last,\n        UsersPerGroup: userPerGroup,\n        Users: users\n      });\n    })();\n  } // Read admin config settings from db\n\n\n  getConfig() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this2.db, \"Configuration\", \"configID\");\n      const docSnap = yield getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n      } else {\n        console.log(\"No such document!\");\n      }\n    })();\n  } // Read nb groups created from db\n\n\n  createdGrp() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this3.db, \"Groups\", \"groupsCreated\");\n      const docSnap = yield getDoc(docRef);\n      let data;\n\n      if (docSnap.exists()) {\n        try {\n          data = docSnap.data().created;\n          return data;\n        } catch (err) {\n          console.error(err);\n        }\n      } else {\n        return -1;\n      }\n    })();\n  } // Get users without a groups\n\n\n  getUsersWithoutGroup() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const userRef = collection(_this4.db, \"Users\");\n      const q = query(userRef, where(\"Group\", \"==\", 0));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        console.log(doc.data()[\"Name\"]);\n      });\n    })();\n  } // Get incomplete groups\n\n\n  getIncompleteGroups() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [],\n          id;\n      const userRef = collection(_this5.db, \"Groups\");\n      const q = query(userRef, where(\"FreePlace\", \"!=\", 0));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        id = doc.data()[\"Id\"];\n        list.push(id);\n      });\n      return list;\n    })();\n  } // Put a user in random group\n\n\n  putInRandomGroup(username, random) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this6.db, 'Groups', 'Group' + random), {\n        Users: username\n      });\n    })();\n  }\n\n}\n\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore));\n};\n\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/services/database.service.ts"],"names":["doc","getDoc","getFirestore","setDoc","getDocs","collection","query","where","i0","i1","DatabaseService","constructor","fireservices","db","newConfig","users","groups","last","userPerGroup","Groups","Last","UsersPerGroup","Users","getConfig","docRef","docSnap","exists","console","log","data","createdGrp","created","err","error","getUsersWithoutGroup","userRef","q","snapShot","forEach","getIncompleteGroups","list","id","push","putInRandomGroup","username","random","ɵfac","DatabaseService_Factory","t","ɵɵinject","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { doc, getDoc, getFirestore, setDoc, getDocs, collection, query, where } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/firestore\";\r\nexport class DatabaseService {\r\n    constructor(fireservices) {\r\n        this.fireservices = fireservices;\r\n        this.db = getFirestore();\r\n    }\r\n    // Write admin config settings in db\r\n    async newConfig(users, groups, last, userPerGroup) {\r\n        await setDoc(doc(this.db, 'Configuration', 'configID'), {\r\n            Groups: groups,\r\n            Last: last,\r\n            UsersPerGroup: userPerGroup,\r\n            Users: users\r\n        });\r\n    }\r\n    // Read admin config settings from db\r\n    async getConfig() {\r\n        const docRef = doc(this.db, \"Configuration\", \"configID\");\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            console.log(\"Document data:\", docSnap.data());\r\n        }\r\n        else {\r\n            console.log(\"No such document!\");\r\n        }\r\n    }\r\n    // Read nb groups created from db\r\n    async createdGrp() {\r\n        const docRef = doc(this.db, \"Groups\", \"groupsCreated\");\r\n        const docSnap = await getDoc(docRef);\r\n        let data;\r\n        if (docSnap.exists()) {\r\n            try {\r\n                data = docSnap.data().created;\r\n                return data;\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    // Get users without a groups\r\n    async getUsersWithoutGroup() {\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Group\", \"==\", 0));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            console.log(doc.data()[\"Name\"]);\r\n        });\r\n    }\r\n    // Get incomplete groups\r\n    async getIncompleteGroups() {\r\n        let list = [], id;\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const q = query(userRef, where(\"FreePlace\", \"!=\", 0));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            id = doc.data()[\"Id\"];\r\n            list.push(id);\r\n        });\r\n        return list;\r\n    }\r\n    // Put a user in random group\r\n    async putInRandomGroup(username, random) {\r\n        await setDoc(doc(this.db, 'Groups', 'Group' + random), {\r\n            Users: username\r\n        });\r\n    }\r\n}\r\nDatabaseService.ɵfac = function DatabaseService_Factory(t) { return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore)); };\r\nDatabaseService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatabaseService, factory: DatabaseService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}