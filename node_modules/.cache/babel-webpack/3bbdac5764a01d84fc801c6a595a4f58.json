{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fakeAsync, TestBed } from '@angular/core/testing';\nimport { LoginComponent } from './login.component';\nimport { environment } from 'src/environments/environment';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { DatabaseService } from 'src/app/services/database.service';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ConfigGrpesComponent } from '../config-grpes/config-grpes.component';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let loginSpy;\n  let location;\n  let router;\n\n  function updateForm(userName) {\n    fixture.componentInstance.loginAdmin(userName);\n  }\n\n  const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      imports: [AngularFireModule.initializeApp(environment.firebaseConfig), RouterTestingModule.withRoutes([{\n        path: 'login-admin',\n        component: LoginComponent\n      }, {\n        path: 'config',\n        component: ConfigGrpesComponent\n      }]), RouterTestingModule],\n      providers: [DatabaseService]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    spyOn(component.router, 'navigate');\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('initial state'), () => {\n    expect(component.loginAdmin).toBeDefined();\n    expect(component.username).toBeUndefined();\n  };\n  it('should return login ok when login=admin', () => {\n    expect(component.loginAdmin('admin')).toEqual('login ok');\n  });\n  it('should return login error when login!=admin or empty', () => {\n    expect(component.loginAdmin('')).toEqual('login error');\n    expect(component.loginAdmin('admi')).toEqual('login error');\n  });\n  it('should display error on screen when login incorrect', () => {// TODO\n  }); // it('should route to overview if login successfully',fakeAsync( () => {\n  //   // TODO\n  //   // fixture.detectChanges();\n  //   // const btn = fixture.debugElement.nativeElement.querySelector('btn');\n  //   // btn.click();\n  //   // fixture.detectChanges();\n  //   router = TestBed.get(Router);\n  //   location = TestBed.get(Location);\n  //   spyOn(component.router, 'navigate');\n  //   component.loginAdmin(\"admin\");\n  //   // fixture.detectChanges();\n  //   tick();\n  //   expect(component.router.navigate).toEqual(['/config']);\n  // }));\n\n  it('should route to overview if login successfully', fakeAsync(() => {\n    // TODO\n    //component.loginAdmin(\"admin\");\n    updateForm(\"admin\");\n    fixture.detectChanges();\n    expect(routerSpy.navigateByUrl).toHaveBeenCalled();\n    const navArgs = routerSpy.navigateByUrl.calls.first().args[0];\n    expect(navArgs).toBe('/config', 'should nav to Home Page');\n  }));\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/components/admin/login/login.component.spec.ts"],"names":["fakeAsync","TestBed","LoginComponent","environment","AngularFireModule","DatabaseService","RouterTestingModule","ConfigGrpesComponent","describe","component","fixture","loginSpy","location","router","updateForm","userName","componentInstance","loginAdmin","routerSpy","jasmine","createSpyObj","beforeEach","configureTestingModule","declarations","imports","initializeApp","firebaseConfig","withRoutes","path","providers","compileComponents","createComponent","detectChanges","spyOn","it","expect","toBeTruthy","toBeDefined","username","toBeUndefined","toEqual","navigateByUrl","toHaveBeenCalled","navArgs","calls","first","args","toBe"],"mappings":"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","sourcesContent":["import { fakeAsync, TestBed } from '@angular/core/testing';\r\nimport { LoginComponent } from './login.component';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AngularFireModule } from '@angular/fire/compat';\r\nimport { DatabaseService } from 'src/app/services/database.service';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { ConfigGrpesComponent } from '../config-grpes/config-grpes.component';\r\ndescribe('LoginComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let loginSpy;\r\n    let location;\r\n    let router;\r\n    function updateForm(userName) {\r\n        fixture.componentInstance.loginAdmin(userName);\r\n    }\r\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [LoginComponent],\r\n            imports: [AngularFireModule.initializeApp(environment.firebaseConfig),\r\n                RouterTestingModule.withRoutes([{ path: 'login-admin', component: LoginComponent }, { path: 'config', component: ConfigGrpesComponent }]),\r\n                RouterTestingModule],\r\n            providers: [DatabaseService]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(LoginComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n        spyOn(component.router, 'navigate');\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('initial state'), () => {\r\n        expect(component.loginAdmin).toBeDefined();\r\n        expect(component.username).toBeUndefined();\r\n    };\r\n    it('should return login ok when login=admin', () => {\r\n        expect(component.loginAdmin('admin')).toEqual('login ok');\r\n    });\r\n    it('should return login error when login!=admin or empty', () => {\r\n        expect(component.loginAdmin('')).toEqual('login error');\r\n        expect(component.loginAdmin('admi')).toEqual('login error');\r\n    });\r\n    it('should display error on screen when login incorrect', () => {\r\n        // TODO\r\n    });\r\n    // it('should route to overview if login successfully',fakeAsync( () => {\r\n    //   // TODO\r\n    //   // fixture.detectChanges();\r\n    //   // const btn = fixture.debugElement.nativeElement.querySelector('btn');\r\n    //   // btn.click();\r\n    //   // fixture.detectChanges();\r\n    //   router = TestBed.get(Router);\r\n    //   location = TestBed.get(Location);\r\n    //   spyOn(component.router, 'navigate');\r\n    //   component.loginAdmin(\"admin\");\r\n    //   // fixture.detectChanges();\r\n    //   tick();\r\n    //   expect(component.router.navigate).toEqual(['/config']);\r\n    // }));\r\n    it('should route to overview if login successfully', fakeAsync(() => {\r\n        // TODO\r\n        //component.loginAdmin(\"admin\");\r\n        updateForm(\"admin\");\r\n        fixture.detectChanges();\r\n        expect(routerSpy.navigateByUrl).toHaveBeenCalled();\r\n        const navArgs = routerSpy.navigateByUrl.calls.first().args[0];\r\n        expect(navArgs).toBe('/config', 'should nav to Home Page');\r\n    }));\r\n});\r\n"]},"metadata":{},"sourceType":"module"}