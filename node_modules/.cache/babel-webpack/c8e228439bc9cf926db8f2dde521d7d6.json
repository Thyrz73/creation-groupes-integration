{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { doc, getDoc, getFirestore, setDoc, getDocs, collection, query, where, updateDoc, arrayUnion, increment } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport class DatabaseService {\n  constructor(fireservices) {\n    this.fireservices = fireservices;\n    this.db = getFirestore();\n  } // Write admin config settings in db\n\n\n  newConfig(users, groups, last, userPerGroup) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this.db, 'Configuration', 'configID'), {\n        CurrentGroups: 0,\n        Groups: groups,\n        Last: last,\n        NbCurrentUsers: 0,\n        Users: users,\n        UsersPerGroup: userPerGroup\n      });\n    })();\n  } // Read admin config settings from db\n\n\n  getConfig() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this2.db, \"Configuration\", \"configID\");\n      const docSnap = yield getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n      } else {\n        console.log(\"No such document!\");\n      }\n    })();\n  } // Read nb groups created from db\n\n\n  createdGrp() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this3.db, \"Groups\", \"groupsCreated\");\n      const docSnap = yield getDoc(docRef);\n      let data;\n\n      if (docSnap.exists()) {\n        try {\n          data = docSnap.data().created;\n          return data;\n        } catch (err) {\n          console.error(err);\n          return 'err';\n        }\n      } else {\n        return -1;\n      }\n    })();\n  } // Get users without a groups\n\n\n  getUsersWithoutGroup() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [];\n      const userRef = collection(_this4.db, \"Users\");\n      const q = query(userRef, where(\"Group\", \"==\", 0));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        list.push(doc.data()[\"Name\"]);\n      });\n      console.log(list);\n      return list;\n    })();\n  } // Get incomplete groups\n\n\n  getIncompleteGroups() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [],\n          id;\n      const userRef = collection(_this5.db, \"Groups\");\n      const q = query(userRef, where(\"FreePlace\", \"!=\", 0));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        id = doc.data()[\"Id\"];\n        list.push(id);\n      });\n      return list;\n    })();\n  } // Put a user in random group\n\n\n  putInRandomGroup(username, random) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let group = \"Group\" + random;\n      yield updateDoc(doc(_this6.db, 'Groups', group), {\n        Users: arrayUnion(username),\n        FreePlace: increment(-1)\n      });\n      yield updateDoc(doc(_this6.db, \"Users\", username), {\n        Group: random\n      });\n    })();\n  } // Get group name\n\n\n  getGroupName(username) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let group;\n      const userRef = collection(_this7.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", username));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        group = doc.data()[\"Group\"];\n      });\n      return group;\n    })();\n  } // Get users of group\n\n\n  getUsers(groupId) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [],\n          user;\n      const userRef = collection(_this8.db, \"Groups\");\n      const q = query(userRef, where(\"Id\", \"==\", groupId));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        user = doc.data()[\"Users\"];\n        list.push(user);\n      });\n      return list;\n    })();\n  } // Get all created groups\n\n\n  getCreatedGroups() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let groupNames = [];\n      const userRef = collection(_this9.db, \"Groups\");\n      const snapShot = getDocs(userRef);\n      (yield snapShot).forEach(doc => {\n        groupNames[doc.data()[\"Id\"]] = doc.data()[\"Users\"];\n      });\n      return groupNames;\n    })();\n  }\n\n  removeFromGroup(username, id) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      yield updateDoc(doc(_this10.db, 'Users', username), {\n        Group: 0\n      });\n      yield updateDoc(doc(_this10.db, \"Groups\", id), {\n        FreePlace: increment(1)\n      });\n    })();\n  }\n\n  GroupCreation(inviteName, username, code) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const refGrpCurrent = yield getDoc(doc(_this11.db, \"Configuration\", \"configID\"));\n      const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\n      const maxGroups = yield getDoc(doc(_this11.db, \"Configuration\", \"configID\"));\n      const maxNumber = maxGroups.data()[\"Groups\"];\n      const grp = yield getDocs(collection(_this11.db, \"Groups\"));\n      const freeplace = maxGroups.data()[\"UsersPerGroup\"] - 1; // let id = grpCurrent+1;\n\n      let id = 0;\n      grp.forEach(data => {\n        id++;\n      });\n      id++;\n      console.log(\"final id = \" + id + \"\\n\");\n\n      if (grpCurrent >= maxNumber) {\n        return false;\n      } else {\n        let list = [];\n        list.push(username);\n        yield setDoc(doc(_this11.db, 'GroupsOnHold', 'Group' + id), {\n          FreePlace: freeplace,\n          Id: id,\n          Users: list,\n          invite: code\n        });\n\n        _this11.inviteUser(inviteName, code);\n\n        return true;\n      }\n    })();\n  }\n\n  inviteUser(inviteName, code) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"invité : \" + inviteName + \"\\ncode d'invitation : \" + code);\n      const userRef = collection(_this12.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", inviteName));\n      const snapShot = getDocs(q);\n\n      if (!(yield snapShot).empty) {\n        yield updateDoc(doc(_this12.db, 'Users', inviteName), {\n          invite: code\n        });\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  } // Register username if login for first time\n\n\n  logInName(username) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const userRef = collection(_this13.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", username));\n      const snapShot = getDocs(q);\n      const refUsersCurrent = yield getDoc(doc(_this13.db, \"Configuration\", \"configID\"));\n      const usersCurrent = refUsersCurrent.data()[\"NbCurrentUsers\"];\n      const refUsersMax = yield getDoc(doc(_this13.db, \"Configuration\", \"configID\"));\n      const usersMax = refUsersMax.data()[\"Users\"];\n\n      if (usersCurrent < usersMax) {\n        if ((yield snapShot).empty) {\n          yield setDoc(doc(_this13.db, 'Users', username), {\n            Group: 0,\n            Name: username,\n            invite: \"/\"\n          });\n          yield updateDoc(doc(_this13.db, \"Configuration\", \"configID\"), {\n            NbCurrentUsers: increment(1)\n          });\n        }\n\n        return true;\n      } else {\n        if ((yield snapShot).empty) {\n          return false;\n        }\n\n        return true;\n      }\n    })();\n  } // Delete group\n\n\n  deleteGrp(id) {\n    const groupRef = collection(this.db, \"Groups\");\n  }\n\n  invitedToGrp(user) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      const userRef = collection(_this14.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", user));\n      const snapShot = getDocs(q);\n      let res;\n      (yield snapShot).forEach(doc => {\n        res = doc.data()[\"invite\"];\n      });\n      console.log(\"èèèèèèèèèèèè  \" + res);\n      return res;\n    })();\n  }\n\n  joinInv(user) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      let users = [];\n      let groupId = 0,\n          freeplace = 0,\n          inGrp,\n          code = \"\";\n      yield _this15.invitedToGrp(user).then(res => {\n        code = res;\n      });\n      const grpRef = collection(_this15.db, \"GroupsOnHold\");\n      const q = query(grpRef, where(\"invite\", \"==\", code));\n      const snapShot = getDocs(q);\n      console.log('...................' + code);\n      (yield snapShot).forEach(doc => {\n        groupId = doc.data()[\"Id\"];\n        users = doc.data()[\"Users\"];\n        freeplace = doc.data()[\"FreePlace\"];\n      });\n\n      if ((yield snapShot).empty) {\n        return 2;\n      }\n\n      if (freeplace == 0) {\n        return 1;\n      }\n\n      const userRef = collection(_this15.db, \"Users\");\n      const q2 = query(userRef, where(\"Name\", \"==\", user));\n      const snapShot2 = getDocs(q2);\n      (yield snapShot2).forEach(doc2 => {\n        inGrp = doc2.data()[\"Group\"];\n      });\n\n      if (inGrp !== 0) {\n        return 3;\n      }\n\n      let listUsers = [];\n      const refGrpCurrent = yield getDoc(doc(_this15.db, \"Configuration\", \"configID\"));\n      const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"] + 1;\n      yield updateDoc(doc(_this15.db, \"Configuration\", \"configID\"), {\n        CurrentGroups: increment(+1)\n      });\n      (yield snapShot).forEach(doc => {\n        listUsers = doc.data()[\"Users\"];\n      });\n      listUsers.push(user);\n      yield setDoc(doc(_this15.db, 'Groups', 'Group' + grpCurrent), {\n        FreePlace: freeplace,\n        Id: grpCurrent,\n        Users: listUsers,\n        invite: code\n      });\n\n      _this15.changeGrp(grpCurrent, user, listUsers);\n\n      return 0;\n    })();\n  }\n\n  changeGrp(groupId, user, users) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      yield updateDoc(doc(_this16.db, 'Users', user), {\n        Group: groupId\n      });\n      users.push(user);\n      yield updateDoc(doc(_this16.db, 'Groups', 'Group' + groupId), {\n        FreePlace: increment(-1),\n        Users: users\n      });\n      yield updateDoc(doc(_this16.db, 'Users', user), {\n        invite: '/'\n      });\n    })();\n  }\n\n  resetInv(user) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      yield updateDoc(doc(_this17.db, 'Users', user), {\n        invite: '/'\n      });\n    })();\n  } // Check if we got to max nb of groups\n\n\n  groupIsMax() {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      const refGrpCurrent = yield getDoc(doc(_this18.db, \"Configuration\", \"configID\"));\n      const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\n      const maxNumber = refGrpCurrent.data()[\"Groups\"];\n\n      if (grpCurrent >= maxNumber) {\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n}\n\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore));\n};\n\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/services/database.service.ts"],"names":["doc","getDoc","getFirestore","setDoc","getDocs","collection","query","where","updateDoc","arrayUnion","increment","i0","i1","DatabaseService","constructor","fireservices","db","newConfig","users","groups","last","userPerGroup","CurrentGroups","Groups","Last","NbCurrentUsers","Users","UsersPerGroup","getConfig","docRef","docSnap","exists","console","log","data","createdGrp","created","err","error","getUsersWithoutGroup","list","userRef","q","snapShot","forEach","push","getIncompleteGroups","id","putInRandomGroup","username","random","group","FreePlace","Group","getGroupName","getUsers","groupId","user","getCreatedGroups","groupNames","removeFromGroup","GroupCreation","inviteName","code","refGrpCurrent","grpCurrent","maxGroups","maxNumber","grp","freeplace","Id","invite","inviteUser","empty","logInName","refUsersCurrent","usersCurrent","refUsersMax","usersMax","Name","deleteGrp","groupRef","invitedToGrp","res","joinInv","inGrp","then","grpRef","q2","snapShot2","doc2","listUsers","changeGrp","resetInv","groupIsMax","ɵfac","DatabaseService_Factory","t","ɵɵinject","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,YAAtB,EAAoCC,MAApC,EAA4CC,OAA5C,EAAqDC,UAArD,EAAiEC,KAAjE,EAAwEC,KAAxE,EAA+EC,SAA/E,EAA0FC,UAA1F,EAAsGC,SAAtG,QAAuH,oBAAvH;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,EAAL,GAAUd,YAAY,EAAtB;AACH,GAJwB,CAKzB;;;AACMe,EAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,YAAtB,EAAoC;AAAA;;AAAA;AAC/C,YAAMlB,MAAM,CAACH,GAAG,CAAC,KAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,EAA4C;AACpDM,QAAAA,aAAa,EAAE,CADqC;AAEpDC,QAAAA,MAAM,EAAEJ,MAF4C;AAGpDK,QAAAA,IAAI,EAAEJ,IAH8C;AAIpDK,QAAAA,cAAc,EAAE,CAJoC;AAKpDC,QAAAA,KAAK,EAAER,KAL6C;AAMpDS,QAAAA,aAAa,EAAEN;AANqC,OAA5C,CAAZ;AAD+C;AASlD,GAfwB,CAgBzB;;;AACMO,EAAAA,SAAS,GAAG;AAAA;;AAAA;AACd,YAAMC,MAAM,GAAG7B,GAAG,CAAC,MAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAlB;AACA,YAAMc,OAAO,SAAS7B,MAAM,CAAC4B,MAAD,CAA5B;;AACA,UAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAAO,CAACI,IAAR,EAA9B;AACH,OAFD,MAGK;AACDF,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AARa;AASjB,GA1BwB,CA2BzB;;;AACME,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,YAAMN,MAAM,GAAG7B,GAAG,CAAC,MAAI,CAACgB,EAAN,EAAU,QAAV,EAAoB,eAApB,CAAlB;AACA,YAAMc,OAAO,SAAS7B,MAAM,CAAC4B,MAAD,CAA5B;AACA,UAAIK,IAAJ;;AACA,UAAIJ,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClB,YAAI;AACAG,UAAAA,IAAI,GAAGJ,OAAO,CAACI,IAAR,GAAeE,OAAtB;AACA,iBAAOF,IAAP;AACH,SAHD,CAIA,OAAOG,GAAP,EAAY;AACRL,UAAAA,OAAO,CAACM,KAAR,CAAcD,GAAd;AACA,iBAAO,KAAP;AACH;AACJ,OATD,MAUK;AACD,eAAO,CAAC,CAAR;AACH;AAhBc;AAiBlB,GA7CwB,CA8CzB;;;AACME,EAAAA,oBAAoB,GAAG;AAAA;;AAAA;AACzB,UAAIC,IAAI,GAAG,EAAX;AACA,YAAMC,OAAO,GAAGpC,UAAU,CAAC,MAAI,CAACW,EAAN,EAAU,OAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,OAAD,EAAU,IAAV,EAAgB,CAAhB,CAAf,CAAf;AACA,YAAMoC,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACA,aAAOC,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9BwC,QAAAA,IAAI,CAACK,IAAL,CAAU7C,GAAG,CAACkC,IAAJ,GAAW,MAAX,CAAV;AACH,OAFD;AAGAF,MAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AACA,aAAOA,IAAP;AATyB;AAU5B,GAzDwB,CA0DzB;;;AACMM,EAAAA,mBAAmB,GAAG;AAAA;;AAAA;AACxB,UAAIN,IAAI,GAAG,EAAX;AAAA,UAAeO,EAAf;AACA,YAAMN,OAAO,GAAGpC,UAAU,CAAC,MAAI,CAACW,EAAN,EAAU,QAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,WAAD,EAAc,IAAd,EAAoB,CAApB,CAAf,CAAf;AACA,YAAMoC,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACA,aAAOC,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9B+C,QAAAA,EAAE,GAAG/C,GAAG,CAACkC,IAAJ,GAAW,IAAX,CAAL;AACAM,QAAAA,IAAI,CAACK,IAAL,CAAUE,EAAV;AACH,OAHD;AAIA,aAAOP,IAAP;AATwB;AAU3B,GArEwB,CAsEzB;;;AACMQ,EAAAA,gBAAgB,CAACC,QAAD,EAAWC,MAAX,EAAmB;AAAA;;AAAA;AACrC,UAAIC,KAAK,GAAG,UAAUD,MAAtB;AACA,YAAM1C,SAAS,CAACR,GAAG,CAAC,MAAI,CAACgB,EAAN,EAAU,QAAV,EAAoBmC,KAApB,CAAJ,EAAgC;AAC3CzB,QAAAA,KAAK,EAAEjB,UAAU,CAACwC,QAAD,CAD0B;AAE3CG,QAAAA,SAAS,EAAE1C,SAAS,CAAC,CAAC,CAAF;AAFuB,OAAhC,CAAf;AAIA,YAAMF,SAAS,CAACR,GAAG,CAAC,MAAI,CAACgB,EAAN,EAAU,OAAV,EAAmBiC,QAAnB,CAAJ,EAAkC;AAC7CI,QAAAA,KAAK,EAAEH;AADsC,OAAlC,CAAf;AANqC;AASxC,GAhFwB,CAiFzB;;;AACMI,EAAAA,YAAY,CAACL,QAAD,EAAW;AAAA;;AAAA;AACzB,UAAIE,KAAJ;AACA,YAAMV,OAAO,GAAGpC,UAAU,CAAC,MAAI,CAACW,EAAN,EAAU,OAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,MAAD,EAAS,IAAT,EAAe0C,QAAf,CAAf,CAAf;AACA,YAAMN,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACA,aAAOC,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9BmD,QAAAA,KAAK,GAAGnD,GAAG,CAACkC,IAAJ,GAAW,OAAX,CAAR;AACH,OAFD;AAGA,aAAOiB,KAAP;AARyB;AAS5B,GA3FwB,CA4FzB;;;AACMI,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAAA;;AAAA;AACpB,UAAIhB,IAAI,GAAG,EAAX;AAAA,UAAeiB,IAAf;AACA,YAAMhB,OAAO,GAAGpC,UAAU,CAAC,MAAI,CAACW,EAAN,EAAU,QAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,IAAD,EAAO,IAAP,EAAaiD,OAAb,CAAf,CAAf;AACA,YAAMb,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACA,aAAOC,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9ByD,QAAAA,IAAI,GAAGzD,GAAG,CAACkC,IAAJ,GAAW,OAAX,CAAP;AACAM,QAAAA,IAAI,CAACK,IAAL,CAAUY,IAAV;AACH,OAHD;AAIA,aAAOjB,IAAP;AAToB;AAUvB,GAvGwB,CAwGzB;;;AACMkB,EAAAA,gBAAgB,GAAG;AAAA;;AAAA;AACrB,UAAIC,UAAU,GAAG,EAAjB;AACA,YAAMlB,OAAO,GAAGpC,UAAU,CAAC,MAAI,CAACW,EAAN,EAAU,QAAV,CAA1B;AACA,YAAM2B,QAAQ,GAAGvC,OAAO,CAACqC,OAAD,CAAxB;AACA,aAAOE,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9B2D,QAAAA,UAAU,CAAC3D,GAAG,CAACkC,IAAJ,GAAW,IAAX,CAAD,CAAV,GAA+BlC,GAAG,CAACkC,IAAJ,GAAW,OAAX,CAA/B;AACH,OAFD;AAGA,aAAOyB,UAAP;AAPqB;AAQxB;;AACKC,EAAAA,eAAe,CAACX,QAAD,EAAWF,EAAX,EAAe;AAAA;;AAAA;AAChC,YAAMvC,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,OAAV,EAAmBiC,QAAnB,CAAJ,EAAkC;AAC7CI,QAAAA,KAAK,EAAE;AADsC,OAAlC,CAAf;AAGA,YAAM7C,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,QAAV,EAAoB+B,EAApB,CAAJ,EAA6B;AACxCK,QAAAA,SAAS,EAAE1C,SAAS,CAAC,CAAD;AADoB,OAA7B,CAAf;AAJgC;AAOnC;;AACKmD,EAAAA,aAAa,CAACC,UAAD,EAAab,QAAb,EAAuBc,IAAvB,EAA6B;AAAA;;AAAA;AAC5C,YAAMC,aAAa,SAAS/D,MAAM,CAACD,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,CAAlC;AACA,YAAMiD,UAAU,GAAGD,aAAa,CAAC9B,IAAd,GAAqB,eAArB,CAAnB;AACA,YAAMgC,SAAS,SAASjE,MAAM,CAACD,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,CAA9B;AACA,YAAMmD,SAAS,GAAGD,SAAS,CAAChC,IAAV,GAAiB,QAAjB,CAAlB;AACA,YAAMkC,GAAG,SAAShE,OAAO,CAACC,UAAU,CAAC,OAAI,CAACW,EAAN,EAAU,QAAV,CAAX,CAAzB;AACA,YAAMqD,SAAS,GAAGH,SAAS,CAAChC,IAAV,GAAiB,eAAjB,IAAoC,CAAtD,CAN4C,CAO5C;;AACA,UAAIa,EAAE,GAAG,CAAT;AACAqB,MAAAA,GAAG,CAACxB,OAAJ,CAAYV,IAAI,IAAI;AAChBa,QAAAA,EAAE;AACL,OAFD;AAGAA,MAAAA,EAAE;AACFf,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBc,EAAhB,GAAqB,IAAjC;;AACA,UAAIkB,UAAU,IAAIE,SAAlB,EAA6B;AACzB,eAAO,KAAP;AACH,OAFD,MAGK;AACD,YAAI3B,IAAI,GAAG,EAAX;AACAA,QAAAA,IAAI,CAACK,IAAL,CAAUI,QAAV;AACA,cAAM9C,MAAM,CAACH,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,cAAV,EAA0B,UAAU+B,EAApC,CAAJ,EAA6C;AACrDK,UAAAA,SAAS,EAAEiB,SAD0C;AAErDC,UAAAA,EAAE,EAAEvB,EAFiD;AAGrDrB,UAAAA,KAAK,EAAEc,IAH8C;AAIrD+B,UAAAA,MAAM,EAAER;AAJ6C,SAA7C,CAAZ;;AAMA,QAAA,OAAI,CAACS,UAAL,CAAgBV,UAAhB,EAA4BC,IAA5B;;AACA,eAAO,IAAP;AACH;AA5B2C;AA6B/C;;AACKS,EAAAA,UAAU,CAACV,UAAD,EAAaC,IAAb,EAAmB;AAAA;;AAAA;AAC/B/B,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAc6B,UAAd,GAA2B,wBAA3B,GAAsDC,IAAlE;AACA,YAAMtB,OAAO,GAAGpC,UAAU,CAAC,OAAI,CAACW,EAAN,EAAU,OAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,MAAD,EAAS,IAAT,EAAeuD,UAAf,CAAf,CAAf;AACA,YAAMnB,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;;AACA,UAAI,CAAC,OAAOC,QAAP,EAAiB8B,KAAtB,EAA6B;AACzB,cAAMjE,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,OAAV,EAAmB8C,UAAnB,CAAJ,EAAoC;AAC/CS,UAAAA,MAAM,EAAER;AADuC,SAApC,CAAf;AAGA,eAAO,IAAP;AACH,OALD,MAMK;AACD,eAAO,KAAP;AACH;AAb8B;AAclC,GAtKwB,CAuKzB;;;AACMW,EAAAA,SAAS,CAACzB,QAAD,EAAW;AAAA;;AAAA;AACtB,YAAMR,OAAO,GAAGpC,UAAU,CAAC,OAAI,CAACW,EAAN,EAAU,OAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,MAAD,EAAS,IAAT,EAAe0C,QAAf,CAAf,CAAf;AACA,YAAMN,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACA,YAAMiC,eAAe,SAAS1E,MAAM,CAACD,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,CAApC;AACA,YAAM4D,YAAY,GAAGD,eAAe,CAACzC,IAAhB,GAAuB,gBAAvB,CAArB;AACA,YAAM2C,WAAW,SAAS5E,MAAM,CAACD,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,CAAhC;AACA,YAAM8D,QAAQ,GAAGD,WAAW,CAAC3C,IAAZ,GAAmB,OAAnB,CAAjB;;AACA,UAAI0C,YAAY,GAAGE,QAAnB,EAA6B;AACzB,YAAI,OAAOnC,QAAP,EAAiB8B,KAArB,EAA4B;AACxB,gBAAMtE,MAAM,CAACH,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,OAAV,EAAmBiC,QAAnB,CAAJ,EAAkC;AAC1CI,YAAAA,KAAK,EAAE,CADmC;AAE1C0B,YAAAA,IAAI,EAAE9B,QAFoC;AAG1CsB,YAAAA,MAAM,EAAE;AAHkC,WAAlC,CAAZ;AAKA,gBAAM/D,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,EAA4C;AACvDS,YAAAA,cAAc,EAAEf,SAAS,CAAC,CAAD;AAD8B,WAA5C,CAAf;AAGH;;AACD,eAAO,IAAP;AACH,OAZD,MAaK;AACD,YAAI,OAAOiC,QAAP,EAAiB8B,KAArB,EAA4B;AACxB,iBAAO,KAAP;AACH;;AACD,eAAO,IAAP;AACH;AA1BqB;AA2BzB,GAnMwB,CAoMzB;;;AACAO,EAAAA,SAAS,CAACjC,EAAD,EAAK;AACV,UAAMkC,QAAQ,GAAG5E,UAAU,CAAC,KAAKW,EAAN,EAAU,QAAV,CAA3B;AACH;;AACKkE,EAAAA,YAAY,CAACzB,IAAD,EAAO;AAAA;;AAAA;AACrB,YAAMhB,OAAO,GAAGpC,UAAU,CAAC,OAAI,CAACW,EAAN,EAAU,OAAV,CAA1B;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,MAAD,EAAS,IAAT,EAAekD,IAAf,CAAf,CAAf;AACA,YAAMd,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACA,UAAIyC,GAAJ;AACA,aAAOxC,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9BmF,QAAAA,GAAG,GAAGnF,GAAG,CAACkC,IAAJ,GAAW,QAAX,CAAN;AACH,OAFD;AAGAF,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBkD,GAA/B;AACA,aAAOA,GAAP;AATqB;AAUxB;;AACKC,EAAAA,OAAO,CAAC3B,IAAD,EAAO;AAAA;;AAAA;AAChB,UAAIvC,KAAK,GAAG,EAAZ;AACA,UAAIsC,OAAO,GAAG,CAAd;AAAA,UAAiBa,SAAS,GAAG,CAA7B;AAAA,UAAgCgB,KAAhC;AAAA,UAAuCtB,IAAI,GAAG,EAA9C;AACA,YAAM,OAAI,CAACmB,YAAL,CAAkBzB,IAAlB,EAAwB6B,IAAxB,CAA8BH,GAAD,IAAS;AACxCpB,QAAAA,IAAI,GAAGoB,GAAP;AACH,OAFK,CAAN;AAGA,YAAMI,MAAM,GAAGlF,UAAU,CAAC,OAAI,CAACW,EAAN,EAAU,cAAV,CAAzB;AACA,YAAM0B,CAAC,GAAGpC,KAAK,CAACiF,MAAD,EAAShF,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBwD,IAAjB,CAAd,CAAf;AACA,YAAMpB,QAAQ,GAAGvC,OAAO,CAACsC,CAAD,CAAxB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwB8B,IAApC;AACA,aAAOpB,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9BwD,QAAAA,OAAO,GAAGxD,GAAG,CAACkC,IAAJ,GAAW,IAAX,CAAV;AACAhB,QAAAA,KAAK,GAAGlB,GAAG,CAACkC,IAAJ,GAAW,OAAX,CAAR;AACAmC,QAAAA,SAAS,GAAGrE,GAAG,CAACkC,IAAJ,GAAW,WAAX,CAAZ;AACH,OAJD;;AAKA,UAAI,OAAOS,QAAP,EAAiB8B,KAArB,EAA4B;AACxB,eAAO,CAAP;AACH;;AACD,UAAIJ,SAAS,IAAI,CAAjB,EAAoB;AAChB,eAAO,CAAP;AACH;;AACD,YAAM5B,OAAO,GAAGpC,UAAU,CAAC,OAAI,CAACW,EAAN,EAAU,OAAV,CAA1B;AACA,YAAMwE,EAAE,GAAGlF,KAAK,CAACmC,OAAD,EAAUlC,KAAK,CAAC,MAAD,EAAS,IAAT,EAAekD,IAAf,CAAf,CAAhB;AACA,YAAMgC,SAAS,GAAGrF,OAAO,CAACoF,EAAD,CAAzB;AACA,aAAOC,SAAP,EAAkB7C,OAAlB,CAA2B8C,IAAD,IAAU;AAChCL,QAAAA,KAAK,GAAGK,IAAI,CAACxD,IAAL,GAAY,OAAZ,CAAR;AACH,OAFD;;AAGA,UAAImD,KAAK,KAAK,CAAd,EAAiB;AACb,eAAO,CAAP;AACH;;AACD,UAAIM,SAAS,GAAG,EAAhB;AACA,YAAM3B,aAAa,SAAS/D,MAAM,CAACD,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,CAAlC;AACA,YAAMiD,UAAU,GAAGD,aAAa,CAAC9B,IAAd,GAAqB,eAArB,IAAwC,CAA3D;AACA,YAAM1B,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,EAA4C;AACvDM,QAAAA,aAAa,EAAEZ,SAAS,CAAC,CAAC,CAAF;AAD+B,OAA5C,CAAf;AAGA,aAAOiC,QAAP,EAAiBC,OAAjB,CAA0B5C,GAAD,IAAS;AAC9B2F,QAAAA,SAAS,GAAG3F,GAAG,CAACkC,IAAJ,GAAW,OAAX,CAAZ;AACH,OAFD;AAGAyD,MAAAA,SAAS,CAAC9C,IAAV,CAAeY,IAAf;AACA,YAAMtD,MAAM,CAACH,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,QAAV,EAAoB,UAAUiD,UAA9B,CAAJ,EAA+C;AACvDb,QAAAA,SAAS,EAAEiB,SAD4C;AAEvDC,QAAAA,EAAE,EAAEL,UAFmD;AAGvDvC,QAAAA,KAAK,EAAEiE,SAHgD;AAIvDpB,QAAAA,MAAM,EAAER;AAJ+C,OAA/C,CAAZ;;AAMA,MAAA,OAAI,CAAC6B,SAAL,CAAe3B,UAAf,EAA2BR,IAA3B,EAAiCkC,SAAjC;;AACA,aAAO,CAAP;AA/CgB;AAgDnB;;AACKC,EAAAA,SAAS,CAACpC,OAAD,EAAUC,IAAV,EAAgBvC,KAAhB,EAAuB;AAAA;;AAAA;AAClC,YAAMV,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,OAAV,EAAmByC,IAAnB,CAAJ,EAA8B;AACzCJ,QAAAA,KAAK,EAAEG;AADkC,OAA9B,CAAf;AAGAtC,MAAAA,KAAK,CAAC2B,IAAN,CAAWY,IAAX;AACA,YAAMjD,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,QAAV,EAAoB,UAAUwC,OAA9B,CAAJ,EAA4C;AACvDJ,QAAAA,SAAS,EAAE1C,SAAS,CAAC,CAAC,CAAF,CADmC;AAEvDgB,QAAAA,KAAK,EAAER;AAFgD,OAA5C,CAAf;AAIA,YAAMV,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,OAAV,EAAmByC,IAAnB,CAAJ,EAA8B;AACzCc,QAAAA,MAAM,EAAE;AADiC,OAA9B,CAAf;AATkC;AAYrC;;AACKsB,EAAAA,QAAQ,CAACpC,IAAD,EAAO;AAAA;;AAAA;AACjB,YAAMjD,SAAS,CAACR,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,OAAV,EAAmByC,IAAnB,CAAJ,EAA8B;AACzCc,QAAAA,MAAM,EAAE;AADiC,OAA9B,CAAf;AADiB;AAIpB,GArRwB,CAsRzB;;;AACMuB,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,YAAM9B,aAAa,SAAS/D,MAAM,CAACD,GAAG,CAAC,OAAI,CAACgB,EAAN,EAAU,eAAV,EAA2B,UAA3B,CAAJ,CAAlC;AACA,YAAMiD,UAAU,GAAGD,aAAa,CAAC9B,IAAd,GAAqB,eAArB,CAAnB;AACA,YAAMiC,SAAS,GAAGH,aAAa,CAAC9B,IAAd,GAAqB,QAArB,CAAlB;;AACA,UAAI+B,UAAU,IAAIE,SAAlB,EAA6B;AACzB,eAAO,IAAP;AACH,OAFD,MAGK;AACD,eAAO,KAAP;AACH;AATc;AAUlB;;AAjSwB;;AAmS7BtD,eAAe,CAACkF,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIpF,eAAV,EAA2BF,EAAE,CAACuF,QAAH,CAAYtF,EAAE,CAACuF,gBAAf,CAA3B,CAAP;AAAsE,CAAnI;;AACAtF,eAAe,CAACuF,KAAhB,GAAwB,aAAczF,EAAE,CAAC0F,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzF,eAAT;AAA0B0F,EAAAA,OAAO,EAAE1F,eAAe,CAACkF,IAAnD;AAAyDS,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { doc, getDoc, getFirestore, setDoc, getDocs, collection, query, where, updateDoc, arrayUnion, increment } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/firestore\";\r\nexport class DatabaseService {\r\n    constructor(fireservices) {\r\n        this.fireservices = fireservices;\r\n        this.db = getFirestore();\r\n    }\r\n    // Write admin config settings in db\r\n    async newConfig(users, groups, last, userPerGroup) {\r\n        await setDoc(doc(this.db, 'Configuration', 'configID'), {\r\n            CurrentGroups: 0,\r\n            Groups: groups,\r\n            Last: last,\r\n            NbCurrentUsers: 0,\r\n            Users: users,\r\n            UsersPerGroup: userPerGroup,\r\n        });\r\n    }\r\n    // Read admin config settings from db\r\n    async getConfig() {\r\n        const docRef = doc(this.db, \"Configuration\", \"configID\");\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            console.log(\"Document data:\", docSnap.data());\r\n        }\r\n        else {\r\n            console.log(\"No such document!\");\r\n        }\r\n    }\r\n    // Read nb groups created from db\r\n    async createdGrp() {\r\n        const docRef = doc(this.db, \"Groups\", \"groupsCreated\");\r\n        const docSnap = await getDoc(docRef);\r\n        let data;\r\n        if (docSnap.exists()) {\r\n            try {\r\n                data = docSnap.data().created;\r\n                return data;\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                return 'err';\r\n            }\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    // Get users without a groups\r\n    async getUsersWithoutGroup() {\r\n        let list = [];\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Group\", \"==\", 0));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            list.push(doc.data()[\"Name\"]);\r\n        });\r\n        console.log(list);\r\n        return list;\r\n    }\r\n    // Get incomplete groups\r\n    async getIncompleteGroups() {\r\n        let list = [], id;\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const q = query(userRef, where(\"FreePlace\", \"!=\", 0));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            id = doc.data()[\"Id\"];\r\n            list.push(id);\r\n        });\r\n        return list;\r\n    }\r\n    // Put a user in random group\r\n    async putInRandomGroup(username, random) {\r\n        let group = \"Group\" + random;\r\n        await updateDoc(doc(this.db, 'Groups', group), {\r\n            Users: arrayUnion(username),\r\n            FreePlace: increment(-1)\r\n        });\r\n        await updateDoc(doc(this.db, \"Users\", username), {\r\n            Group: random\r\n        });\r\n    }\r\n    // Get group name\r\n    async getGroupName(username) {\r\n        let group;\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", username));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            group = doc.data()[\"Group\"];\r\n        });\r\n        return group;\r\n    }\r\n    // Get users of group\r\n    async getUsers(groupId) {\r\n        let list = [], user;\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const q = query(userRef, where(\"Id\", \"==\", groupId));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            user = doc.data()[\"Users\"];\r\n            list.push(user);\r\n        });\r\n        return list;\r\n    }\r\n    // Get all created groups\r\n    async getCreatedGroups() {\r\n        let groupNames = [];\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const snapShot = getDocs(userRef);\r\n        (await snapShot).forEach((doc) => {\r\n            groupNames[doc.data()[\"Id\"]] = doc.data()[\"Users\"];\r\n        });\r\n        return groupNames;\r\n    }\r\n    async removeFromGroup(username, id) {\r\n        await updateDoc(doc(this.db, 'Users', username), {\r\n            Group: 0\r\n        });\r\n        await updateDoc(doc(this.db, \"Groups\", id), {\r\n            FreePlace: increment(1),\r\n        });\r\n    }\r\n    async GroupCreation(inviteName, username, code) {\r\n        const refGrpCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\r\n        const maxGroups = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const maxNumber = maxGroups.data()[\"Groups\"];\r\n        const grp = await getDocs(collection(this.db, \"Groups\"));\r\n        const freeplace = maxGroups.data()[\"UsersPerGroup\"] - 1;\r\n        // let id = grpCurrent+1;\r\n        let id = 0;\r\n        grp.forEach(data => {\r\n            id++;\r\n        });\r\n        id++;\r\n        console.log(\"final id = \" + id + \"\\n\");\r\n        if (grpCurrent >= maxNumber) {\r\n            return false;\r\n        }\r\n        else {\r\n            let list = [];\r\n            list.push(username);\r\n            await setDoc(doc(this.db, 'GroupsOnHold', 'Group' + id), {\r\n                FreePlace: freeplace,\r\n                Id: id,\r\n                Users: list,\r\n                invite: code\r\n            });\r\n            this.inviteUser(inviteName, code);\r\n            return true;\r\n        }\r\n    }\r\n    async inviteUser(inviteName, code) {\r\n        console.log(\"invité : \" + inviteName + \"\\ncode d'invitation : \" + code);\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", inviteName));\r\n        const snapShot = getDocs(q);\r\n        if (!(await snapShot).empty) {\r\n            await updateDoc(doc(this.db, 'Users', inviteName), {\r\n                invite: code\r\n            });\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // Register username if login for first time\r\n    async logInName(username) {\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", username));\r\n        const snapShot = getDocs(q);\r\n        const refUsersCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const usersCurrent = refUsersCurrent.data()[\"NbCurrentUsers\"];\r\n        const refUsersMax = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const usersMax = refUsersMax.data()[\"Users\"];\r\n        if (usersCurrent < usersMax) {\r\n            if ((await snapShot).empty) {\r\n                await setDoc(doc(this.db, 'Users', username), {\r\n                    Group: 0,\r\n                    Name: username,\r\n                    invite: \"/\"\r\n                });\r\n                await updateDoc(doc(this.db, \"Configuration\", \"configID\"), {\r\n                    NbCurrentUsers: increment(1)\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            if ((await snapShot).empty) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    // Delete group\r\n    deleteGrp(id) {\r\n        const groupRef = collection(this.db, \"Groups\");\r\n    }\r\n    async invitedToGrp(user) {\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", user));\r\n        const snapShot = getDocs(q);\r\n        let res;\r\n        (await snapShot).forEach((doc) => {\r\n            res = doc.data()[\"invite\"];\r\n        });\r\n        console.log(\"èèèèèèèèèèèè  \" + res);\r\n        return res;\r\n    }\r\n    async joinInv(user) {\r\n        let users = [];\r\n        let groupId = 0, freeplace = 0, inGrp, code = \"\";\r\n        await this.invitedToGrp(user).then((res) => {\r\n            code = res;\r\n        });\r\n        const grpRef = collection(this.db, \"GroupsOnHold\");\r\n        const q = query(grpRef, where(\"invite\", \"==\", code));\r\n        const snapShot = getDocs(q);\r\n        console.log('...................' + code);\r\n        (await snapShot).forEach((doc) => {\r\n            groupId = doc.data()[\"Id\"];\r\n            users = doc.data()[\"Users\"];\r\n            freeplace = doc.data()[\"FreePlace\"];\r\n        });\r\n        if ((await snapShot).empty) {\r\n            return 2;\r\n        }\r\n        if (freeplace == 0) {\r\n            return 1;\r\n        }\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q2 = query(userRef, where(\"Name\", \"==\", user));\r\n        const snapShot2 = getDocs(q2);\r\n        (await snapShot2).forEach((doc2) => {\r\n            inGrp = doc2.data()[\"Group\"];\r\n        });\r\n        if (inGrp !== 0) {\r\n            return 3;\r\n        }\r\n        let listUsers = [];\r\n        const refGrpCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"] + 1;\r\n        await updateDoc(doc(this.db, \"Configuration\", \"configID\"), {\r\n            CurrentGroups: increment(+1)\r\n        });\r\n        (await snapShot).forEach((doc) => {\r\n            listUsers = doc.data()[\"Users\"];\r\n        });\r\n        listUsers.push(user);\r\n        await setDoc(doc(this.db, 'Groups', 'Group' + grpCurrent), {\r\n            FreePlace: freeplace,\r\n            Id: grpCurrent,\r\n            Users: listUsers,\r\n            invite: code\r\n        });\r\n        this.changeGrp(grpCurrent, user, listUsers);\r\n        return 0;\r\n    }\r\n    async changeGrp(groupId, user, users) {\r\n        await updateDoc(doc(this.db, 'Users', user), {\r\n            Group: groupId\r\n        });\r\n        users.push(user);\r\n        await updateDoc(doc(this.db, 'Groups', 'Group' + groupId), {\r\n            FreePlace: increment(-1),\r\n            Users: users\r\n        });\r\n        await updateDoc(doc(this.db, 'Users', user), {\r\n            invite: '/'\r\n        });\r\n    }\r\n    async resetInv(user) {\r\n        await updateDoc(doc(this.db, 'Users', user), {\r\n            invite: '/'\r\n        });\r\n    }\r\n    // Check if we got to max nb of groups\r\n    async groupIsMax() {\r\n        const refGrpCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\r\n        const maxNumber = refGrpCurrent.data()[\"Groups\"];\r\n        if (grpCurrent >= maxNumber) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nDatabaseService.ɵfac = function DatabaseService_Factory(t) { return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore)); };\r\nDatabaseService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatabaseService, factory: DatabaseService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}