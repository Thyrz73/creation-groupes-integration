{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { doc, getDoc, getFirestore, setDoc, getDocs, collection, query, where, updateDoc, arrayUnion, increment } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport class DatabaseService {\n  constructor(fireservices) {\n    this.fireservices = fireservices;\n    this.db = getFirestore();\n  } // Write admin config settings in db\n\n\n  newConfig(users, groups, last, userPerGroup) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this.db, 'Configuration', 'configID'), {\n        CurrentGroups: 0,\n        Groups: groups,\n        Last: last,\n        NbCurrentUsers: 0,\n        Users: users,\n        UsersPerGroup: userPerGroup\n      });\n    })();\n  } // Read admin config settings from db\n\n\n  getConfig() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this2.db, \"Configuration\", \"configID\");\n      const docSnap = yield getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n      } else {\n        console.log(\"No such document!\");\n      }\n    })();\n  } // Read nb groups created from db\n\n\n  createdGrp() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const docRef = doc(_this3.db, \"Groups\", \"groupsCreated\");\n      const docSnap = yield getDoc(docRef);\n      let data;\n\n      if (docSnap.exists()) {\n        try {\n          data = docSnap.data().created;\n          return data;\n        } catch (err) {\n          console.error(err);\n          return 'err';\n        }\n      } else {\n        return -1;\n      }\n    })();\n  } // Get users without a groups\n\n\n  getUsersWithoutGroup() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [];\n      const userRef = collection(_this4.db, \"Users\");\n      const q = query(userRef, where(\"Group\", \"==\", 0));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        list.push(doc.data()[\"Name\"]);\n      });\n      return list;\n    })();\n  } // Get incomplete groups\n\n\n  getIncompleteGroups() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [],\n          id;\n      const userRef = collection(_this5.db, \"Groups\");\n      const q = query(userRef, where(\"FreePlace\", \"!=\", 0));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        id = doc.data()[\"Id\"];\n        list.push(id);\n      });\n      return list;\n    })();\n  } // Put a user in random group\n\n\n  putInRandomGroup(username, random) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let group = \"Group\" + random;\n      yield updateDoc(doc(_this6.db, 'Groups', group), {\n        Users: arrayUnion(username),\n        FreePlace: increment(-1)\n      });\n      yield updateDoc(doc(_this6.db, \"Users\", username), {\n        Group: parseInt(random)\n      });\n    })();\n  } // Get group name\n\n\n  getGroupName(username) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      let group;\n      const userRef = collection(_this7.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", username));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        group = doc.data()[\"Group\"];\n      });\n      return group;\n    })();\n  } // Get users of group\n\n\n  getUsers(groupId) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let list = [],\n          user;\n      const userRef = collection(_this8.db, \"Groups\");\n      const q = query(userRef, where(\"Id\", \"==\", groupId));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        user = doc.data()[\"Users\"];\n        list.push(user);\n      });\n      return list;\n    })();\n  } // Get all created groups\n\n\n  getCreatedGroups() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      let groupNames = [];\n      const userRef = collection(_this9.db, \"Groups\");\n      const snapShot = getDocs(userRef);\n      (yield snapShot).forEach(doc => {\n        groupNames[doc.data()[\"Id\"]] = doc.data()[\"Users\"];\n      });\n      return groupNames;\n    })();\n  } // Remove user from group\n\n\n  removeFromGroup(username, id) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      yield updateDoc(doc(_this10.db, 'Users', username), {\n        Group: 0\n      });\n      let list = [],\n          user;\n      const userRef = collection(_this10.db, \"Groups\");\n      const q = query(userRef, where(\"Id\", \"==\", id));\n      const snapShot = getDocs(q);\n      (yield snapShot).forEach(doc => {\n        user = doc.data()[\"Users\"];\n        list.push(user);\n      });\n      let finalList = [],\n          j = 0;\n\n      for (let i = 0; i < list[0].length; i++) {\n        if (list[0][i] !== username) {\n          finalList[j] = list[0][i];\n          j++;\n        }\n      }\n\n      yield updateDoc(doc(_this10.db, 'Groups', \"Group\" + id), {\n        FreePlace: increment(1),\n        Users: finalList\n      });\n    })();\n  } // Register username if login for first time\n\n\n  logInName(username) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const userRef = collection(_this11.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", username));\n      const snapShot = getDocs(q);\n      const refUsersCurrent = yield getDoc(doc(_this11.db, \"Configuration\", \"configID\"));\n      const usersCurrent = refUsersCurrent.data()[\"NbCurrentUsers\"];\n      const refUsersMax = yield getDoc(doc(_this11.db, \"Configuration\", \"configID\"));\n      const usersMax = refUsersMax.data()[\"Users\"];\n\n      if (usersCurrent < usersMax) {\n        if ((yield snapShot).empty) {\n          yield setDoc(doc(_this11.db, 'Users', username), {\n            Group: 0,\n            Name: username\n          });\n          yield updateDoc(doc(_this11.db, \"Configuration\", \"configID\"), {\n            NbCurrentUsers: increment(1)\n          });\n        }\n\n        return true;\n      } else {\n        if ((yield snapShot).empty) {\n          return false;\n        }\n\n        return true;\n      }\n    })();\n  } // Check if we got to max nb of groups\n\n\n  groupIsMax() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      const refGrpCurrent = yield getDoc(doc(_this12.db, \"Configuration\", \"configID\"));\n      const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\n      const maxNumber = refGrpCurrent.data()[\"Groups\"];\n\n      if (grpCurrent >= maxNumber) {\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  }\n\n  GroupCreation(inviteName, username, code) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const refGrpCurrent = yield getDoc(doc(_this13.db, \"Configuration\", \"configID\"));\n      const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\n      const maxGroups = yield getDoc(doc(_this13.db, \"Configuration\", \"configID\"));\n      const maxNumber = maxGroups.data()[\"Groups\"];\n      const freeplace = maxGroups.data()[\"UsersPerGroup\"] - 1;\n      let id = grpCurrent + 1;\n      console.log(\"final id = \" + id + \"\\n\");\n\n      if (grpCurrent >= maxNumber) {\n        return false;\n      } else {\n        let list = [];\n        list.push(username);\n        yield setDoc(doc(_this13.db, 'Groups', 'Group' + id), {\n          FreePlace: freeplace,\n          Id: id,\n          Users: list,\n          invite: code\n        });\n\n        _this13.inviteUser(inviteName, code);\n\n        yield updateDoc(doc(_this13.db, \"Users\", username), {\n          Group: id\n        });\n        yield updateDoc(doc(_this13.db, \"Configuration\", \"configID\"), {\n          CurrentGroups: increment(+1)\n        });\n        return true;\n      }\n    })();\n  }\n\n  inviteUser(inviteName, code) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"invité : \" + inviteName + \"\\ncode d'invitation : \" + code);\n      const userRef = collection(_this14.db, \"Users\");\n      const q = query(userRef, where(\"Name\", \"==\", inviteName));\n      const snapShot = getDocs(q);\n\n      if (!(yield snapShot).empty) {\n        yield updateDoc(doc(_this14.db, 'Users', inviteName), {\n          invite: code\n        });\n        return true;\n      } else {\n        return false;\n      }\n    })();\n  } // Delete group\n\n\n  deleteGrp(id) {\n    const groupRef = collection(this.db, \"Groups\");\n  }\n\n}\n\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore));\n};\n\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/services/database.service.ts"],"names":["doc","getDoc","getFirestore","setDoc","getDocs","collection","query","where","updateDoc","arrayUnion","increment","i0","i1","DatabaseService","constructor","fireservices","db","newConfig","users","groups","last","userPerGroup","CurrentGroups","Groups","Last","NbCurrentUsers","Users","UsersPerGroup","getConfig","docRef","docSnap","exists","console","log","data","createdGrp","created","err","error","getUsersWithoutGroup","list","userRef","q","snapShot","forEach","push","getIncompleteGroups","id","putInRandomGroup","username","random","group","FreePlace","Group","parseInt","getGroupName","getUsers","groupId","user","getCreatedGroups","groupNames","removeFromGroup","finalList","j","i","length","logInName","refUsersCurrent","usersCurrent","refUsersMax","usersMax","empty","Name","groupIsMax","refGrpCurrent","grpCurrent","maxNumber","GroupCreation","inviteName","code","maxGroups","freeplace","Id","invite","inviteUser","deleteGrp","groupRef","ɵfac","DatabaseService_Factory","t","ɵɵinject","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { doc, getDoc, getFirestore, setDoc, getDocs, collection, query, where, updateDoc, arrayUnion, increment } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/firestore\";\r\nexport class DatabaseService {\r\n    constructor(fireservices) {\r\n        this.fireservices = fireservices;\r\n        this.db = getFirestore();\r\n    }\r\n    // Write admin config settings in db\r\n    async newConfig(users, groups, last, userPerGroup) {\r\n        await setDoc(doc(this.db, 'Configuration', 'configID'), {\r\n            CurrentGroups: 0,\r\n            Groups: groups,\r\n            Last: last,\r\n            NbCurrentUsers: 0,\r\n            Users: users,\r\n            UsersPerGroup: userPerGroup,\r\n        });\r\n    }\r\n    // Read admin config settings from db\r\n    async getConfig() {\r\n        const docRef = doc(this.db, \"Configuration\", \"configID\");\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            console.log(\"Document data:\", docSnap.data());\r\n        }\r\n        else {\r\n            console.log(\"No such document!\");\r\n        }\r\n    }\r\n    // Read nb groups created from db\r\n    async createdGrp() {\r\n        const docRef = doc(this.db, \"Groups\", \"groupsCreated\");\r\n        const docSnap = await getDoc(docRef);\r\n        let data;\r\n        if (docSnap.exists()) {\r\n            try {\r\n                data = docSnap.data().created;\r\n                return data;\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                return 'err';\r\n            }\r\n        }\r\n        else {\r\n            return -1;\r\n        }\r\n    }\r\n    // Get users without a groups\r\n    async getUsersWithoutGroup() {\r\n        let list = [];\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Group\", \"==\", 0));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            list.push(doc.data()[\"Name\"]);\r\n        });\r\n        return list;\r\n    }\r\n    // Get incomplete groups\r\n    async getIncompleteGroups() {\r\n        let list = [], id;\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const q = query(userRef, where(\"FreePlace\", \"!=\", 0));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            id = doc.data()[\"Id\"];\r\n            list.push(id);\r\n        });\r\n        return list;\r\n    }\r\n    // Put a user in random group\r\n    async putInRandomGroup(username, random) {\r\n        let group = \"Group\" + random;\r\n        await updateDoc(doc(this.db, 'Groups', group), {\r\n            Users: arrayUnion(username),\r\n            FreePlace: increment(-1)\r\n        });\r\n        await updateDoc(doc(this.db, \"Users\", username), {\r\n            Group: parseInt(random)\r\n        });\r\n    }\r\n    // Get group name\r\n    async getGroupName(username) {\r\n        let group;\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", username));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            group = doc.data()[\"Group\"];\r\n        });\r\n        return group;\r\n    }\r\n    // Get users of group\r\n    async getUsers(groupId) {\r\n        let list = [], user;\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const q = query(userRef, where(\"Id\", \"==\", groupId));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            user = doc.data()[\"Users\"];\r\n            list.push(user);\r\n        });\r\n        return list;\r\n    }\r\n    // Get all created groups\r\n    async getCreatedGroups() {\r\n        let groupNames = [];\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const snapShot = getDocs(userRef);\r\n        (await snapShot).forEach((doc) => {\r\n            groupNames[doc.data()[\"Id\"]] = doc.data()[\"Users\"];\r\n        });\r\n        return groupNames;\r\n    }\r\n    // Remove user from group\r\n    async removeFromGroup(username, id) {\r\n        await updateDoc(doc(this.db, 'Users', username), {\r\n            Group: 0\r\n        });\r\n        let list = [], user;\r\n        const userRef = collection(this.db, \"Groups\");\r\n        const q = query(userRef, where(\"Id\", \"==\", id));\r\n        const snapShot = getDocs(q);\r\n        (await snapShot).forEach((doc) => {\r\n            user = doc.data()[\"Users\"];\r\n            list.push(user);\r\n        });\r\n        let finalList = [], j = 0;\r\n        for (let i = 0; i < list[0].length; i++) {\r\n            if (list[0][i] !== username) {\r\n                finalList[j] = list[0][i];\r\n                j++;\r\n            }\r\n        }\r\n        await updateDoc(doc(this.db, 'Groups', \"Group\" + id), {\r\n            FreePlace: increment(1),\r\n            Users: finalList\r\n        });\r\n    }\r\n    // Register username if login for first time\r\n    async logInName(username) {\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", username));\r\n        const snapShot = getDocs(q);\r\n        const refUsersCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const usersCurrent = refUsersCurrent.data()[\"NbCurrentUsers\"];\r\n        const refUsersMax = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const usersMax = refUsersMax.data()[\"Users\"];\r\n        if (usersCurrent < usersMax) {\r\n            if ((await snapShot).empty) {\r\n                await setDoc(doc(this.db, 'Users', username), {\r\n                    Group: 0,\r\n                    Name: username\r\n                });\r\n                await updateDoc(doc(this.db, \"Configuration\", \"configID\"), {\r\n                    NbCurrentUsers: increment(1)\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n        else {\r\n            if ((await snapShot).empty) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    // Check if we got to max nb of groups\r\n    async groupIsMax() {\r\n        const refGrpCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\r\n        const maxNumber = refGrpCurrent.data()[\"Groups\"];\r\n        if (grpCurrent >= maxNumber) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    async GroupCreation(inviteName, username, code) {\r\n        const refGrpCurrent = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const grpCurrent = refGrpCurrent.data()[\"CurrentGroups\"];\r\n        const maxGroups = await getDoc(doc(this.db, \"Configuration\", \"configID\"));\r\n        const maxNumber = maxGroups.data()[\"Groups\"];\r\n        const freeplace = maxGroups.data()[\"UsersPerGroup\"] - 1;\r\n        let id = grpCurrent + 1;\r\n        console.log(\"final id = \" + id + \"\\n\");\r\n        if (grpCurrent >= maxNumber) {\r\n            return false;\r\n        }\r\n        else {\r\n            let list = [];\r\n            list.push(username);\r\n            await setDoc(doc(this.db, 'Groups', 'Group' + id), {\r\n                FreePlace: freeplace,\r\n                Id: id,\r\n                Users: list,\r\n                invite: code\r\n            });\r\n            this.inviteUser(inviteName, code);\r\n            await updateDoc(doc(this.db, \"Users\", username), {\r\n                Group: id\r\n            });\r\n            await updateDoc(doc(this.db, \"Configuration\", \"configID\"), {\r\n                CurrentGroups: increment(+1)\r\n            });\r\n            return true;\r\n        }\r\n    }\r\n    async inviteUser(inviteName, code) {\r\n        console.log(\"invité : \" + inviteName + \"\\ncode d'invitation : \" + code);\r\n        const userRef = collection(this.db, \"Users\");\r\n        const q = query(userRef, where(\"Name\", \"==\", inviteName));\r\n        const snapShot = getDocs(q);\r\n        if (!(await snapShot).empty) {\r\n            await updateDoc(doc(this.db, 'Users', inviteName), {\r\n                invite: code\r\n            });\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // Delete group\r\n    deleteGrp(id) {\r\n        const groupRef = collection(this.db, \"Groups\");\r\n    }\r\n}\r\nDatabaseService.ɵfac = function DatabaseService_Factory(t) { return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore)); };\r\nDatabaseService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatabaseService, factory: DatabaseService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}