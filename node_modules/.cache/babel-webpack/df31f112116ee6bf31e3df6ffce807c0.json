{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TestBed } from '@angular/core/testing';\nimport { RouterModule } from '@angular/router';\nimport { LoginComponent } from './login.component';\nimport { environment } from 'src/environments/environment';\nimport { AngularFireModule } from '@angular/fire/compat';\nimport { DatabaseService } from 'src/app/services/database.service';\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let loginSpy;\n\n  function updateForm(userName) {// fixture.componentInstance.loginAdmin['username'].setValue(userName);\n  }\n\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [LoginComponent],\n      imports: [AngularFireModule.initializeApp(environment.firebaseConfig), RouterModule.forRoot([])],\n      providers: [DatabaseService]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(LoginComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('initial state'), () => {\n    expect(component.loginAdmin).toBeDefined();\n    expect(component.username).toBeUndefined();\n  };\n  it('should return login ok when login=admin', () => {\n    expect(component.loginAdmin('admin')).toEqual('login ok');\n  });\n  it('should return login error when login!=admin or empty', () => {\n    expect(component.loginAdmin('')).toEqual('login error');\n    expect(component.loginAdmin('admi')).toEqual('login error');\n  });\n  it('should display error on screen when login incorrect', () => {// const div: HTMLElement = fixture.nativeElement.querySelector('div');\n    // const display = div.style.display;\n    // expect(display).toBe('inline');\n  });\n  it('should route to overview if login successfully'), () => {};\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/components/admin/login/login.component.spec.ts"],"names":["TestBed","RouterModule","LoginComponent","environment","AngularFireModule","DatabaseService","describe","component","fixture","loginSpy","updateForm","userName","beforeEach","configureTestingModule","declarations","imports","initializeApp","firebaseConfig","forRoot","providers","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","loginAdmin","toBeDefined","username","toBeUndefined","toEqual"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC7B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,QAAJ;;AACA,WAASC,UAAT,CAAoBC,QAApB,EAA8B,CAC1B;AACH;;AACDC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMZ,OAAO,CAACa,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACZ,cAAD,CADmB;AAEjCa,MAAAA,OAAO,EAAE,CAACX,iBAAiB,CAACY,aAAlB,CAAgCb,WAAW,CAACc,cAA5C,CAAD,EACLhB,YAAY,CAACiB,OAAb,CAAqB,EAArB,CADK,CAFwB;AAIjCC,MAAAA,SAAS,EAAE,CAACd,eAAD;AAJsB,KAA/B,EAMDe,iBANC,EAAN;AAOH,GARS,EAAV;AASAR,EAAAA,UAAU,CAAC,MAAM;AACbJ,IAAAA,OAAO,GAAGR,OAAO,CAACqB,eAAR,CAAwBnB,cAAxB,CAAV;AACAK,IAAAA,SAAS,GAAGC,OAAO,CAACc,iBAApB;AACAd,IAAAA,OAAO,CAACe,aAAR;AACH,GAJS,CAAV;AAKAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAAClB,SAAD,CAAN,CAAkBmB,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,eAAD,CAAF,EAAqB,MAAM;AACvBC,IAAAA,MAAM,CAAClB,SAAS,CAACoB,UAAX,CAAN,CAA6BC,WAA7B;AACAH,IAAAA,MAAM,CAAClB,SAAS,CAACsB,QAAX,CAAN,CAA2BC,aAA3B;AACH,GAHD;AAIAN,EAAAA,EAAE,CAAC,yCAAD,EAA4C,MAAM;AAChDC,IAAAA,MAAM,CAAClB,SAAS,CAACoB,UAAV,CAAqB,OAArB,CAAD,CAAN,CAAsCI,OAAtC,CAA8C,UAA9C;AACH,GAFC,CAAF;AAGAP,EAAAA,EAAE,CAAC,sDAAD,EAAyD,MAAM;AAC7DC,IAAAA,MAAM,CAAClB,SAAS,CAACoB,UAAV,CAAqB,EAArB,CAAD,CAAN,CAAiCI,OAAjC,CAAyC,aAAzC;AACAN,IAAAA,MAAM,CAAClB,SAAS,CAACoB,UAAV,CAAqB,MAArB,CAAD,CAAN,CAAqCI,OAArC,CAA6C,aAA7C;AACH,GAHC,CAAF;AAIAP,EAAAA,EAAE,CAAC,qDAAD,EAAwD,MAAM,CAC5D;AACA;AACA;AACH,GAJC,CAAF;AAKAA,EAAAA,EAAE,CAAC,gDAAD,CAAF,EAAsD,MAAM,CAC3D,CADD;AAEH,CA1CO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\nimport { environment } from 'src/environments/environment';\r\nimport { AngularFireModule } from '@angular/fire/compat';\r\nimport { DatabaseService } from 'src/app/services/database.service';\r\ndescribe('LoginComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let loginSpy;\r\n    function updateForm(userName) {\r\n        // fixture.componentInstance.loginAdmin['username'].setValue(userName);\r\n    }\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [LoginComponent],\r\n            imports: [AngularFireModule.initializeApp(environment.firebaseConfig),\r\n                RouterModule.forRoot([])],\r\n            providers: [DatabaseService]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(LoginComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('initial state'), () => {\r\n        expect(component.loginAdmin).toBeDefined();\r\n        expect(component.username).toBeUndefined();\r\n    };\r\n    it('should return login ok when login=admin', () => {\r\n        expect(component.loginAdmin('admin')).toEqual('login ok');\r\n    });\r\n    it('should return login error when login!=admin or empty', () => {\r\n        expect(component.loginAdmin('')).toEqual('login error');\r\n        expect(component.loginAdmin('admi')).toEqual('login error');\r\n    });\r\n    it('should display error on screen when login incorrect', () => {\r\n        // const div: HTMLElement = fixture.nativeElement.querySelector('div');\r\n        // const display = div.style.display;\r\n        // expect(display).toBe('inline');\r\n    });\r\n    it('should route to overview if login successfully'), () => {\r\n    };\r\n});\r\n"]},"metadata":{},"sourceType":"module"}