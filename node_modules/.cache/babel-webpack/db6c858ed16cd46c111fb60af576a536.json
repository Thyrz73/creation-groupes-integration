{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { doc, getDoc, getFirestore } from \"firebase/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nexport class DatabaseService {\n  constructor(fireservices) {\n    this.fireservices = fireservices;\n  } // Write in db\n\n\n  newConfig(data) {\n    return this.fireservices.collection('Configuration').add(data);\n  } // Read from db\n\n\n  getConfig() {\n    return _asyncToGenerator(function* () {\n      const db = getFirestore();\n      const docRef = doc(db, \"Configuration\", \"configID\");\n      const docSnap = yield getDoc(docRef);\n\n      if (docSnap.exists()) {\n        console.log(\"Document data:\", docSnap.data());\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n      }\n    })();\n  }\n\n}\n\nDatabaseService.ɵfac = function DatabaseService_Factory(t) {\n  return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore));\n};\n\nDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DatabaseService,\n  factory: DatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/belai/Documents/M1/Integration/group_creation/group-creation/creation-groupes-integration/src/app/services/database.service.ts"],"names":["doc","getDoc","getFirestore","i0","i1","DatabaseService","constructor","fireservices","newConfig","data","collection","add","getConfig","db","docRef","docSnap","exists","console","log","ɵfac","DatabaseService_Factory","t","ɵɵinject","AngularFirestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,YAAtB,QAA0C,oBAA1C;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACH,GAHwB,CAIzB;;;AACAC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACZ,WAAO,KAAKF,YAAL,CAAkBG,UAAlB,CAA6B,eAA7B,EAA8CC,GAA9C,CAAkDF,IAAlD,CAAP;AACH,GAPwB,CAQzB;;;AACMG,EAAAA,SAAS,GAAG;AAAA;AACd,YAAMC,EAAE,GAAGX,YAAY,EAAvB;AACA,YAAMY,MAAM,GAAGd,GAAG,CAACa,EAAD,EAAK,eAAL,EAAsB,UAAtB,CAAlB;AACA,YAAME,OAAO,SAASd,MAAM,CAACa,MAAD,CAA5B;;AACA,UAAIC,OAAO,CAACC,MAAR,EAAJ,EAAsB;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,OAAO,CAACN,IAAR,EAA9B;AACH,OAFD,MAGK;AACD;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH;AAVa;AAWjB;;AApBwB;;AAsB7Bb,eAAe,CAACc,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIhB,eAAV,EAA2BF,EAAE,CAACmB,QAAH,CAAYlB,EAAE,CAACmB,gBAAf,CAA3B,CAAP;AAAsE,CAAnI;;AACAlB,eAAe,CAACmB,KAAhB,GAAwB,aAAcrB,EAAE,CAACsB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAErB,eAAT;AAA0BsB,EAAAA,OAAO,EAAEtB,eAAe,CAACc,IAAnD;AAAyDS,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { doc, getDoc, getFirestore } from \"firebase/firestore\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/fire/compat/firestore\";\r\nexport class DatabaseService {\r\n    constructor(fireservices) {\r\n        this.fireservices = fireservices;\r\n    }\r\n    // Write in db\r\n    newConfig(data) {\r\n        return this.fireservices.collection('Configuration').add(data);\r\n    }\r\n    // Read from db\r\n    async getConfig() {\r\n        const db = getFirestore();\r\n        const docRef = doc(db, \"Configuration\", \"configID\");\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) {\r\n            console.log(\"Document data:\", docSnap.data());\r\n        }\r\n        else {\r\n            // doc.data() will be undefined in this case\r\n            console.log(\"No such document!\");\r\n        }\r\n    }\r\n}\r\nDatabaseService.ɵfac = function DatabaseService_Factory(t) { return new (t || DatabaseService)(i0.ɵɵinject(i1.AngularFirestore)); };\r\nDatabaseService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DatabaseService, factory: DatabaseService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}